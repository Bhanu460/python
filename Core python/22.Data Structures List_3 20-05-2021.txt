Built-in Functions with List
all()	any()		enumerate()	
len()	list()		max()		
min()	sum()		

all() Function:
It returns True when all elements in the given iterable are true. If not, it returns False.

Syntax:
all(iterable)

all() Parameters
iterable - any iterable (list, tuple, dictionary, etc.) which contains the elements

The all() method returns:
True - If all elements in an iterable are true
False - If any element in an iterable is false

Truth table for all()
When				Return Value
All values are true			True
All values are false			False
One value is true (others are false)	False
One value is false (others are true)	False
Empty Iterable			True

NOTE: 0 and 1 are the binary values like False, True

Example:How all() works for tuple and lists?
s = [1, 3, 4, 5]
print(all(s))

s = [0, False]
print(all(s))

s = [0, False, 5]
print(all(s))

s = []
print(all(s))

Python any()
It Returns True if any element of an iterable is true. If not, this method returns False.

Syntax:
any(iterable)

The any method returns:
True if at least one element of an iterable is true
False if all elements are false or if an iterable is empty

When				Return Value
All values are true			True
All values are false			False
One value is true (others are false)	True
One value is false (others are true)	True
Empty Iterable			False

NOTE: 0 and 1 are the binary values like False, True

Example:
s =[1, 3, 4, 0]
print(any(s))

s = [0, False]
print(any(s))

s = [0, False, 5]
print(any(s))

s = []
print(any(s))

Python enumerate()
It adds counter to an iterable and returns it (the enumerate object).

Syntax 
enumerate(iterable, start=0)

Parameters:
iterable: A sequence, an iterator, or objects that supports iteration

start(optional): It starts counting from this number. If start is omitted, 0 is taken as start.

How enumerate() works in Python?
BigData=['Big Data', 'Hadoop', 'Spark','Data Science']
eData = enumerate(BigData)
print(type(eData))
print(list(eData))

Looping Over an Enumerate object
bd = ['Big Data', 'Hadoop', 'Spark','Data Science']
for item in enumerate(bd):
  print(item)

Example:
bd = ['Big Data', 'Hadoop', 'Spark','Data Science']
for count, item in enumerate(bd):
  print(count, item)

Example:
bd = ['Big Data', 'Hadoop', 'Spark','Data Science']
for count, item in enumerate(bd, 100):
  print(count, item)

Example:
names = ['Bob', 'Alice', 'Guido']
print(list(enumerate(names)))

Example:
names = ['Bob', 'Alice', 'Guido']
for index, value in enumerate(names):
    print(f'{index}: {value}')

len() Function:
It displays length of characters in numeric format.

Syntax:
len(iterable)

Example:
PyList=[1,2,3,4,5]
print(len(PyList))

list():
It is converting into list data type.

Syntax:
list(iterable)

Example:
PyStr="Hello"
print(list(PyStr)) #['H', 'e', 'l', 'l', 'o']

max():
It is used to display max character based on ASCII or Unicode Value

Syntax:
max(iterable)

Example:
print(max(1,2,3,4))
print(max('a','b','c','d','E'))

min()	
It is used to display min character based on ASCII or Unicode value.

Syntax:
min(iterable)

Example:
print(min(1,2,3,4))
print(min('a','b','c','d','E'))

sum()		
It is used to display sum of values in the list, only for numeric values..

Syntax:
sum(iterable)

Example:
print(sum([1,2,3,4]))

List_of_Lists
A=[[1]*2]*5
print(A)
B=[[2,0]*1]*4
print(B)

List shortcuts
Fives = [5]*4
print(Fives)

Example:
PyList=[1,[2,[3,[4,[5]]]]]
print(PyList[0])
print(PyList[1][0])
print(PyList[1][1][0])

Example:
A=[1,[2,[3,[4,[5]]]]]
print(A)
print(A[0])
print(A[1])
print(A[1][0])
print(A[1][1])
print(A[1][1][1][1])
print(A[1][1][1][1][0])

Example:
A=[1,[2,[3,[4,[5]]]]]
print(A[-1])
print(A[-1][-2])
print(A[-1][-1])

List comprehension
In this method, we basically define the process through which the list needs to be created. We specify what operation needs to be done and on what elements it needs to done.

Syntax:	
[expression for item in iterable]

Example:
result=[x**2 for x in [3,4,5]]
print(result)

Example:
result= [x for x  in range(1,11) if x%2==0]
print(result)
result= [x for x  in range(1,11) if x%2!=0]
print(result)

Syntax:
[expression if conditional else stmt for item in iterable]

Example:
print([x if x>3 else x+1 for x in [1,2,3,4,5,6]])#[2, 3, 4, 4, 5, 6]
print([x if x>3 else x+3 for x in [1,2,3,4,5,6]])#[4, 5, 6, 4, 5, 6]
print([x if x<3 else x+3 for x in [1,2,3,4,5,6]])#[1, 2, 6, 7, 8, 9]

Example:
num=[1,2,3,4]
result=[x*10 for x in num]
print(result)

Example:
print([x for x  in "Hello12345" if x.isdigit()])
print([x for x  in "Hello12345" if x.isalpha()])

NOTE: If any character other than alpha, nums will be ignore...!!

Example:
words=['Hello',"Hai",'python']
result=[x.upper() for x in words]
print(result)

Example:
Sample_List = ["Sample", "List"]
Result = [item[0] for item in Sample_List]
print(Result)

Example:
a=[1,2,3,4,5,6]
b=[2,3]
result=[x+y for x in a for y in b]
print(result )

Differences between Hardcopy, shallowCopy and DeepCopy in python (Copy or Clone)

Hard Copy an Object in Python
In Python, we use = operator to create a copy of an object. You may think that this creates a new object; it doesn't. It only creates a new variable that shares the reference of the original object.

Example:
myList=[1,2,3,4,5,6]
print(myList)
yourList=myList
print(yourList)
myList[0]="NareshIT"
print(myList)
print(yourList)

In Python, there are two ways to create copies:
1 Shallow Copy or COPY
2 Deep Copy

Copy Module
We use the copy module of Python for shallow and deep copy operations. Suppose, you need to copy the compound list say x.

Example:
import copy
print(dir(copy))

Shallow Copy (copy.copy())
A shallow copy creates a new object which stores the reference of the original elements. So, a shallow copy doesn't create a copy of nested objects, instead it just copies the reference of nested objects. This means, a copy process does not recurse or create copies of nested objects itself.

Example:
import copy
myList=[1,2,3,4,5,6]
print(myList)
yourList=myList
print(yourList)
myList=copy.copy(yourList)
myList[4]="PYTHON"
print(myList)
print(yourList)

Example:
import copy
old_list = [[1, 1, 1], [2, 2, 2], [3, 3, 3]]
new_list = copy.copy(old_list)
old_list.append([4, 4, 4])
print("Old list:", old_list)
print("New list:", new_list)

Deep Copy
A deep copy constructs a new compound object and then recursively inserts the copies into it the objects found in the original.

Syntax:
copy.deepcopy(x)

Example:
import copy
yourList=[1,2,3,4,['a','b','c']]
myList=copy.deepcopy(yourList)
myList[4][1]="Hello"
print(myList)
print(yourList)

Example:
import copy
ys = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
zs = copy.deepcopy(ys)
ys[1][1] = 'X'
print(ys)#[[1, 2, 3], [4, 'X', 6], [7, 8, 9]]
print(zs)#[[1, 2, 3], [4, 5, 6], [7, 8, 9]]

zip() in Python
The purpose of zip() is to map the similar index of multiple containers so that they can be used just using as single entity. Python Zip and Unzip lists, tuples.

Syntax :
zip(*iterators)

Parameters : Python iterables or containers ( list, string etc )
Return Value :
Returns a single iterator object, having mapped values from all the containers.

Example:
PyList1=["Hadoop","Spark","PYTHON","DataScience"]
PyList2=["Bigdata","Teradata","Pandas","SKLearn"]
z1=zip(PyList1,PyList2)
print(list(z1))

Example:
Pylist1=[1,2]
Pylist2=[2,3]
ziplist=zip(Pylist1,Pylist2)
ziptuple=zip(Pylist1,Pylist2)
zipset=zip(Pylist1,Pylist2)
zipdict=zip(Pylist1,Pylist2)
print(list(ziplist))
print(tuple(ziptuple))
print(set(zipset))
print(dict(zipdict))

Example:
PyList1=["Hadoop","Spark","PYTHON","DataScience"]
PyList2=["Bigdata","Teradata","Pandas","SKLearn"]
for l1,l2 in zip(PyList1,PyList2):
    print(l1,l2)

Example:
PyList1=["Hadoop","Spark","PYTHON","DataScience"]
PyList2=["Bigdata","Teradata","Pandas","SKLearn"]
Dict_Zip=dict(zip(PyList1,PyList2))
print(Dict_Zip)

Example:
PyList1=[10,20,30,40]
PyList2=[50,60,70,80]
for a,b in zip(PyList1,PyList2):
    print('{} + {}={}'.format(a,b,a+b))

How to unzip?
Unzipping means converting the zipped values back to the individual self as they were. This is done with the help of “*” operator.

Example:
PyList1=["Hadoop","Spark","PYTHON","DataScience"]
PyList2=["Bigdata","Teradata","Pandas","SKLearn"]
z1=zip(PyList1,PyList2)
z2=zip(*z1)
print(*z2)

Difference between del and None Keywords:
del
The variable will be removed and we cannot access that variable(unbind operation)

Example:
PyStr="PYTHON"	
del PyStr	
print(PyStr)#NameError: name 'PyStr' is not defined.

None:
None assignment the variable will not be removed but the corresponding object is eligible for Garbage Collection(re-bind operation).

Example:
PyStr="PYHON"	
print(PyStr)#PYTHON
PyStr=None	
print(PyStr)#None

WORKING WITH PYTHON ARRAYS
It is the collection of elements of a single data type, eg. array of int, array of string. In Python, there is no native array data structure. So, we use Python lists instead of an array.

Create an Array
We can create a Python array with comma separated elements between square brackets[].

How to create an array in Python?
We can make an integer array and store it to arr.
PyArr = [10, 20, 30, 40, 50]

Access elements of an Array
We can access individual elements of an array using index inside square brackets [].

Array Index
Index is the position of element in an array. In Python, arrays are zero-indexed. This means, the element's position starts with 0 instead of 1.

Example: Accessing elements of array using indexing
PyArr = [10, 20, 30, 40, 50]
print(PyArr[0])
print(PyArr[1])
print(PyArr[2])

Find length of an Array
Python arrays are just lists, so finding the length of an array is equivalent to finding length of a list in Python.

Example: 
PyBrands=["Coke", "Apple", "Google", "Microsoft", "Toyota"]
NumBrands=len(PyBrands)
print(NumBrands)

Slicing of an Array
Python has a slicing feature,It allows to access pieces of an array. [x : y]

Example:
PyFruits=["Apple", "Banana", "Mango", "Grapes", "Orange"]
print(PyFruits[1:4])
print(PyFruits[ :3])
print(PyFruits[-4:])
print(PyFruits[-3:-1])

Multi-Dimensional Arrays
It is an array within an array. This means an array holds different arrays inside it.

Example: 
MultArr = [[1,2], [3,4], [5,6], [7,8]]
print(MultArr[0])
print(MultArr[3])
print(MultArr[2][1])
print(MultArr[3][0])

Python Matrix
A matrix is a two-dimensional data structure. In python, matrix is a nested list. 

Example:
PyArr=[['Roy',80,75,85,90,95],
     ['John',75,80,75,85,100],
     ['Dave',80,80,80,90,95]]
print(PyArr[0])
print(PyArr[0][1])
print(PyArr[1][2])
print(PyArr[2][2])

Python Arrays
Array is an idea of storing multiple items of the same type together and it makes easier to calculate the position of each element by simply adding an offset to the base value. A combination of the arrays could save a lot of time by reducing the overall size of the code. It is used to store multiple values in single variable. If you have a list of items that are stored in their corresponding variables like this:

The array can be handled in Python by a module named array. It is useful when we have to manipulate only specific data values. Following are the terms to understand the concept of an array:

Element - Each item stored in an array is called an element.
Index - The location of an element in an array has a numerical index

Array Representation
An array can be declared in various ways and different languages. The important points that should be considered are as follows:
    Index starts with 0.
    We can access each element via its index.
    The length of the array defines the capacity to store the elements.

Array operations
Some of the basic operations supported by an array are as follows:
    Traverse - It prints all the elements one by one.
    Insertion - It adds an element at the given index.
    Deletion - It deletes an element at the given index.
    Search - It searches an element using the given index or by the value.
    Update - It updates an element at the given index.

The Array can be created in Python by importing the array module to the python program.
    from array import *  
    arrayName = array(typecode, [initializers])   

Accessing array elements
We can access the array elements using the respective indices of those elements.

    import array as arr  
    a = arr.array('i', [2, 4, 6, 8])  
    print("First element:", a[0])  
    print("Second element:", a[1])  
    print("Second last element:", a[-1])  

Arrays are mutable, and their elements can be changed in a similar way like lists.
    import array as arr  
    numbers = arr.array('i', [1, 2, 3, 5, 7, 10])  
       
    # changing first element  
    numbers[0] = 0     
    print(numbers)    # Output: array('i', [0, 2, 3, 5, 7, 10])  
       
    # changing 3rd to 5th element  
    numbers[2:5] = arr.array('i', [4, 6, 8])    
    print(numbers)    # Output: array('i', [0, 2, 4, 6, 8, 10])  

The length of an array is defined as the number of elements present in an array. It returns an integer value that is equal to the total number of the elements present in that array.

Syntax
len(array_name)  

Array Concatenation
We can easily concatenate any two arrays using the + symbol.

Example
a=arr.array('d',[1.1 , 2.1 ,3.1,2.6,7.8])  
b=arr.array('d',[3.7,8.6])  
c=arr.array('d')  
c=a+b  
print("Array c = ",c)  

Example
    import array as arr  
    x = arr.array('i', [4, 7, 19, 22])  
    print("First element:", x[0])  
    print("Second element:", x[1])  
    print("Second last element:", x[-1])  